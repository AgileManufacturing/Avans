/* Auto-generated by genmsg_cpp for file /home/atmgast/workspace/Release1.1/ros/deltaRobotNode/srv/MovePath.srv */
#ifndef DELTAROBOTNODE_SERVICE_MOVEPATH_H
#define DELTAROBOTNODE_SERVICE_MOVEPATH_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "deltaRobotNode/Motion.h"



namespace deltaRobotNode
{
template <class ContainerAllocator>
struct MovePathRequest_ {
  typedef MovePathRequest_<ContainerAllocator> Type;

  MovePathRequest_()
  : motion()
  {
  }

  MovePathRequest_(const ContainerAllocator& _alloc)
  : motion(_alloc)
  {
  }

  typedef std::vector< ::deltaRobotNode::Motion_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::deltaRobotNode::Motion_<ContainerAllocator> >::other >  _motion_type;
  std::vector< ::deltaRobotNode::Motion_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::deltaRobotNode::Motion_<ContainerAllocator> >::other >  motion;


  typedef boost::shared_ptr< ::deltaRobotNode::MovePathRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::deltaRobotNode::MovePathRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct MovePathRequest
typedef  ::deltaRobotNode::MovePathRequest_<std::allocator<void> > MovePathRequest;

typedef boost::shared_ptr< ::deltaRobotNode::MovePathRequest> MovePathRequestPtr;
typedef boost::shared_ptr< ::deltaRobotNode::MovePathRequest const> MovePathRequestConstPtr;


template <class ContainerAllocator>
struct MovePathResponse_ {
  typedef MovePathResponse_<ContainerAllocator> Type;

  MovePathResponse_()
  : succeeded(false)
  {
  }

  MovePathResponse_(const ContainerAllocator& _alloc)
  : succeeded(false)
  {
  }

  typedef uint8_t _succeeded_type;
  uint8_t succeeded;


  typedef boost::shared_ptr< ::deltaRobotNode::MovePathResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::deltaRobotNode::MovePathResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct MovePathResponse
typedef  ::deltaRobotNode::MovePathResponse_<std::allocator<void> > MovePathResponse;

typedef boost::shared_ptr< ::deltaRobotNode::MovePathResponse> MovePathResponsePtr;
typedef boost::shared_ptr< ::deltaRobotNode::MovePathResponse const> MovePathResponseConstPtr;

struct MovePath
{

typedef MovePathRequest Request;
typedef MovePathResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct MovePath
} // namespace deltaRobotNode

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::deltaRobotNode::MovePathRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::deltaRobotNode::MovePathRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::deltaRobotNode::MovePathRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d5e2b63c47d3ae5a19960378109d3c87";
  }

  static const char* value(const  ::deltaRobotNode::MovePathRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd5e2b63c47d3ae5aULL;
  static const uint64_t static_value2 = 0x19960378109d3c87ULL;
};

template<class ContainerAllocator>
struct DataType< ::deltaRobotNode::MovePathRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "deltaRobotNode/MovePathRequest";
  }

  static const char* value(const  ::deltaRobotNode::MovePathRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::deltaRobotNode::MovePathRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Motion[] motion\n\
\n\
================================================================================\n\
MSG: deltaRobotNode/Motion\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 speed\n\
";
  }

  static const char* value(const  ::deltaRobotNode::MovePathRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::deltaRobotNode::MovePathResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::deltaRobotNode::MovePathResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::deltaRobotNode::MovePathResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "95e696a0d10686913abb262e0b4cbbcf";
  }

  static const char* value(const  ::deltaRobotNode::MovePathResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x95e696a0d1068691ULL;
  static const uint64_t static_value2 = 0x3abb262e0b4cbbcfULL;
};

template<class ContainerAllocator>
struct DataType< ::deltaRobotNode::MovePathResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "deltaRobotNode/MovePathResponse";
  }

  static const char* value(const  ::deltaRobotNode::MovePathResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::deltaRobotNode::MovePathResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool succeeded\n\
\n\
";
  }

  static const char* value(const  ::deltaRobotNode::MovePathResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::deltaRobotNode::MovePathResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::deltaRobotNode::MovePathRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.motion);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct MovePathRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::deltaRobotNode::MovePathResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.succeeded);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct MovePathResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<deltaRobotNode::MovePath> {
  static const char* value() 
  {
    return "e333d572d6da71847017b8df0bfa52b4";
  }

  static const char* value(const deltaRobotNode::MovePath&) { return value(); } 
};

template<>
struct DataType<deltaRobotNode::MovePath> {
  static const char* value() 
  {
    return "deltaRobotNode/MovePath";
  }

  static const char* value(const deltaRobotNode::MovePath&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<deltaRobotNode::MovePathRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e333d572d6da71847017b8df0bfa52b4";
  }

  static const char* value(const deltaRobotNode::MovePathRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<deltaRobotNode::MovePathRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "deltaRobotNode/MovePath";
  }

  static const char* value(const deltaRobotNode::MovePathRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<deltaRobotNode::MovePathResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e333d572d6da71847017b8df0bfa52b4";
  }

  static const char* value(const deltaRobotNode::MovePathResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<deltaRobotNode::MovePathResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "deltaRobotNode/MovePath";
  }

  static const char* value(const deltaRobotNode::MovePathResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // DELTAROBOTNODE_SERVICE_MOVEPATH_H

