/* Auto-generated by genmsg_cpp for file /home/atmgast/workspace/Release1.1/ros/deltaRobotNode/srv/DefineTCP.srv */
#ifndef DELTAROBOTNODE_SERVICE_DEFINETCP_H
#define DELTAROBOTNODE_SERVICE_DEFINETCP_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "deltaRobotNode/TCPOffset.h"



namespace deltaRobotNode
{
template <class ContainerAllocator>
struct DefineTCPRequest_ {
  typedef DefineTCPRequest_<ContainerAllocator> Type;

  DefineTCPRequest_()
  : tcpoffset()
  {
  }

  DefineTCPRequest_(const ContainerAllocator& _alloc)
  : tcpoffset(_alloc)
  {
  }

  typedef  ::deltaRobotNode::TCPOffset_<ContainerAllocator>  _tcpoffset_type;
   ::deltaRobotNode::TCPOffset_<ContainerAllocator>  tcpoffset;


  typedef boost::shared_ptr< ::deltaRobotNode::DefineTCPRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::deltaRobotNode::DefineTCPRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct DefineTCPRequest
typedef  ::deltaRobotNode::DefineTCPRequest_<std::allocator<void> > DefineTCPRequest;

typedef boost::shared_ptr< ::deltaRobotNode::DefineTCPRequest> DefineTCPRequestPtr;
typedef boost::shared_ptr< ::deltaRobotNode::DefineTCPRequest const> DefineTCPRequestConstPtr;


template <class ContainerAllocator>
struct DefineTCPResponse_ {
  typedef DefineTCPResponse_<ContainerAllocator> Type;

  DefineTCPResponse_()
  : succeeded(false)
  {
  }

  DefineTCPResponse_(const ContainerAllocator& _alloc)
  : succeeded(false)
  {
  }

  typedef uint8_t _succeeded_type;
  uint8_t succeeded;


  typedef boost::shared_ptr< ::deltaRobotNode::DefineTCPResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::deltaRobotNode::DefineTCPResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct DefineTCPResponse
typedef  ::deltaRobotNode::DefineTCPResponse_<std::allocator<void> > DefineTCPResponse;

typedef boost::shared_ptr< ::deltaRobotNode::DefineTCPResponse> DefineTCPResponsePtr;
typedef boost::shared_ptr< ::deltaRobotNode::DefineTCPResponse const> DefineTCPResponseConstPtr;

struct DefineTCP
{

typedef DefineTCPRequest Request;
typedef DefineTCPResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct DefineTCP
} // namespace deltaRobotNode

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::deltaRobotNode::DefineTCPRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::deltaRobotNode::DefineTCPRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::deltaRobotNode::DefineTCPRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "5537892a1c8153a50476dbfc2f4e8b3f";
  }

  static const char* value(const  ::deltaRobotNode::DefineTCPRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x5537892a1c8153a5ULL;
  static const uint64_t static_value2 = 0x0476dbfc2f4e8b3fULL;
};

template<class ContainerAllocator>
struct DataType< ::deltaRobotNode::DefineTCPRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "deltaRobotNode/DefineTCPRequest";
  }

  static const char* value(const  ::deltaRobotNode::DefineTCPRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::deltaRobotNode::DefineTCPRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "TCPOffset tcpoffset\n\
\n\
================================================================================\n\
MSG: deltaRobotNode/TCPOffset\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
";
  }

  static const char* value(const  ::deltaRobotNode::DefineTCPRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::deltaRobotNode::DefineTCPRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::deltaRobotNode::DefineTCPResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::deltaRobotNode::DefineTCPResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::deltaRobotNode::DefineTCPResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "95e696a0d10686913abb262e0b4cbbcf";
  }

  static const char* value(const  ::deltaRobotNode::DefineTCPResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x95e696a0d1068691ULL;
  static const uint64_t static_value2 = 0x3abb262e0b4cbbcfULL;
};

template<class ContainerAllocator>
struct DataType< ::deltaRobotNode::DefineTCPResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "deltaRobotNode/DefineTCPResponse";
  }

  static const char* value(const  ::deltaRobotNode::DefineTCPResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::deltaRobotNode::DefineTCPResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool succeeded\n\
\n\
\n\
";
  }

  static const char* value(const  ::deltaRobotNode::DefineTCPResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::deltaRobotNode::DefineTCPResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::deltaRobotNode::DefineTCPRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.tcpoffset);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct DefineTCPRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::deltaRobotNode::DefineTCPResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.succeeded);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct DefineTCPResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<deltaRobotNode::DefineTCP> {
  static const char* value() 
  {
    return "cde08577d8756c3529f90ce485b43c0c";
  }

  static const char* value(const deltaRobotNode::DefineTCP&) { return value(); } 
};

template<>
struct DataType<deltaRobotNode::DefineTCP> {
  static const char* value() 
  {
    return "deltaRobotNode/DefineTCP";
  }

  static const char* value(const deltaRobotNode::DefineTCP&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<deltaRobotNode::DefineTCPRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cde08577d8756c3529f90ce485b43c0c";
  }

  static const char* value(const deltaRobotNode::DefineTCPRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<deltaRobotNode::DefineTCPRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "deltaRobotNode/DefineTCP";
  }

  static const char* value(const deltaRobotNode::DefineTCPRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<deltaRobotNode::DefineTCPResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cde08577d8756c3529f90ce485b43c0c";
  }

  static const char* value(const deltaRobotNode::DefineTCPResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<deltaRobotNode::DefineTCPResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "deltaRobotNode/DefineTCP";
  }

  static const char* value(const deltaRobotNode::DefineTCPResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // DELTAROBOTNODE_SERVICE_DEFINETCP_H

