/* Auto-generated by genmsg_cpp for file /home/atmgast/workspace/Release1.1/ros/deltaRobotNode/srv/MoveRelativePath.srv */
#ifndef DELTAROBOTNODE_SERVICE_MOVERELATIVEPATH_H
#define DELTAROBOTNODE_SERVICE_MOVERELATIVEPATH_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "deltaRobotNode/Motion.h"



namespace deltaRobotNode
{
template <class ContainerAllocator>
struct MoveRelativePathRequest_ {
  typedef MoveRelativePathRequest_<ContainerAllocator> Type;

  MoveRelativePathRequest_()
  : motion()
  {
  }

  MoveRelativePathRequest_(const ContainerAllocator& _alloc)
  : motion(_alloc)
  {
  }

  typedef std::vector< ::deltaRobotNode::Motion_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::deltaRobotNode::Motion_<ContainerAllocator> >::other >  _motion_type;
  std::vector< ::deltaRobotNode::Motion_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::deltaRobotNode::Motion_<ContainerAllocator> >::other >  motion;


  typedef boost::shared_ptr< ::deltaRobotNode::MoveRelativePathRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::deltaRobotNode::MoveRelativePathRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct MoveRelativePathRequest
typedef  ::deltaRobotNode::MoveRelativePathRequest_<std::allocator<void> > MoveRelativePathRequest;

typedef boost::shared_ptr< ::deltaRobotNode::MoveRelativePathRequest> MoveRelativePathRequestPtr;
typedef boost::shared_ptr< ::deltaRobotNode::MoveRelativePathRequest const> MoveRelativePathRequestConstPtr;


template <class ContainerAllocator>
struct MoveRelativePathResponse_ {
  typedef MoveRelativePathResponse_<ContainerAllocator> Type;

  MoveRelativePathResponse_()
  : succeeded(false)
  {
  }

  MoveRelativePathResponse_(const ContainerAllocator& _alloc)
  : succeeded(false)
  {
  }

  typedef uint8_t _succeeded_type;
  uint8_t succeeded;


  typedef boost::shared_ptr< ::deltaRobotNode::MoveRelativePathResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::deltaRobotNode::MoveRelativePathResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct MoveRelativePathResponse
typedef  ::deltaRobotNode::MoveRelativePathResponse_<std::allocator<void> > MoveRelativePathResponse;

typedef boost::shared_ptr< ::deltaRobotNode::MoveRelativePathResponse> MoveRelativePathResponsePtr;
typedef boost::shared_ptr< ::deltaRobotNode::MoveRelativePathResponse const> MoveRelativePathResponseConstPtr;

struct MoveRelativePath
{

typedef MoveRelativePathRequest Request;
typedef MoveRelativePathResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct MoveRelativePath
} // namespace deltaRobotNode

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::deltaRobotNode::MoveRelativePathRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::deltaRobotNode::MoveRelativePathRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::deltaRobotNode::MoveRelativePathRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d5e2b63c47d3ae5a19960378109d3c87";
  }

  static const char* value(const  ::deltaRobotNode::MoveRelativePathRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd5e2b63c47d3ae5aULL;
  static const uint64_t static_value2 = 0x19960378109d3c87ULL;
};

template<class ContainerAllocator>
struct DataType< ::deltaRobotNode::MoveRelativePathRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "deltaRobotNode/MoveRelativePathRequest";
  }

  static const char* value(const  ::deltaRobotNode::MoveRelativePathRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::deltaRobotNode::MoveRelativePathRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Motion[] motion\n\
\n\
================================================================================\n\
MSG: deltaRobotNode/Motion\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 speed\n\
";
  }

  static const char* value(const  ::deltaRobotNode::MoveRelativePathRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::deltaRobotNode::MoveRelativePathResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::deltaRobotNode::MoveRelativePathResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::deltaRobotNode::MoveRelativePathResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "95e696a0d10686913abb262e0b4cbbcf";
  }

  static const char* value(const  ::deltaRobotNode::MoveRelativePathResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x95e696a0d1068691ULL;
  static const uint64_t static_value2 = 0x3abb262e0b4cbbcfULL;
};

template<class ContainerAllocator>
struct DataType< ::deltaRobotNode::MoveRelativePathResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "deltaRobotNode/MoveRelativePathResponse";
  }

  static const char* value(const  ::deltaRobotNode::MoveRelativePathResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::deltaRobotNode::MoveRelativePathResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool succeeded\n\
\n\
";
  }

  static const char* value(const  ::deltaRobotNode::MoveRelativePathResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::deltaRobotNode::MoveRelativePathResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::deltaRobotNode::MoveRelativePathRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.motion);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct MoveRelativePathRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::deltaRobotNode::MoveRelativePathResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.succeeded);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct MoveRelativePathResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<deltaRobotNode::MoveRelativePath> {
  static const char* value() 
  {
    return "e333d572d6da71847017b8df0bfa52b4";
  }

  static const char* value(const deltaRobotNode::MoveRelativePath&) { return value(); } 
};

template<>
struct DataType<deltaRobotNode::MoveRelativePath> {
  static const char* value() 
  {
    return "deltaRobotNode/MoveRelativePath";
  }

  static const char* value(const deltaRobotNode::MoveRelativePath&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<deltaRobotNode::MoveRelativePathRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e333d572d6da71847017b8df0bfa52b4";
  }

  static const char* value(const deltaRobotNode::MoveRelativePathRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<deltaRobotNode::MoveRelativePathRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "deltaRobotNode/MoveRelativePath";
  }

  static const char* value(const deltaRobotNode::MoveRelativePathRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<deltaRobotNode::MoveRelativePathResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e333d572d6da71847017b8df0bfa52b4";
  }

  static const char* value(const deltaRobotNode::MoveRelativePathResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<deltaRobotNode::MoveRelativePathResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "deltaRobotNode/MoveRelativePath";
  }

  static const char* value(const deltaRobotNode::MoveRelativePathResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // DELTAROBOTNODE_SERVICE_MOVERELATIVEPATH_H

