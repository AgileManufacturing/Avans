"""autogenerated by genpy from deltaRobotNode/DefineTCPRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import deltaRobotNode.msg

class DefineTCPRequest(genpy.Message):
  _md5sum = "5537892a1c8153a50476dbfc2f4e8b3f"
  _type = "deltaRobotNode/DefineTCPRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """TCPOffset tcpoffset

================================================================================
MSG: deltaRobotNode/TCPOffset
float64 x
float64 y
float64 z

"""
  __slots__ = ['tcpoffset']
  _slot_types = ['deltaRobotNode/TCPOffset']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       tcpoffset

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DefineTCPRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.tcpoffset is None:
        self.tcpoffset = deltaRobotNode.msg.TCPOffset()
    else:
      self.tcpoffset = deltaRobotNode.msg.TCPOffset()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3d.pack(_x.tcpoffset.x, _x.tcpoffset.y, _x.tcpoffset.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.tcpoffset is None:
        self.tcpoffset = deltaRobotNode.msg.TCPOffset()
      end = 0
      _x = self
      start = end
      end += 24
      (_x.tcpoffset.x, _x.tcpoffset.y, _x.tcpoffset.z,) = _struct_3d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3d.pack(_x.tcpoffset.x, _x.tcpoffset.y, _x.tcpoffset.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.tcpoffset is None:
        self.tcpoffset = deltaRobotNode.msg.TCPOffset()
      end = 0
      _x = self
      start = end
      end += 24
      (_x.tcpoffset.x, _x.tcpoffset.y, _x.tcpoffset.z,) = _struct_3d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3d = struct.Struct("<3d")
"""autogenerated by genpy from deltaRobotNode/DefineTCPResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class DefineTCPResponse(genpy.Message):
  _md5sum = "95e696a0d10686913abb262e0b4cbbcf"
  _type = "deltaRobotNode/DefineTCPResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool succeeded


"""
  __slots__ = ['succeeded']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       succeeded

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DefineTCPResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.succeeded is None:
        self.succeeded = False
    else:
      self.succeeded = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_B.pack(self.succeeded))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.succeeded,) = _struct_B.unpack(str[start:end])
      self.succeeded = bool(self.succeeded)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_B.pack(self.succeeded))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.succeeded,) = _struct_B.unpack(str[start:end])
      self.succeeded = bool(self.succeeded)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
class DefineTCP(object):
  _type          = 'deltaRobotNode/DefineTCP'
  _md5sum = 'cde08577d8756c3529f90ce485b43c0c'
  _request_class  = DefineTCPRequest
  _response_class = DefineTCPResponse
